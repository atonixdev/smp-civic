version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: smp_civic_db
    environment:
      POSTGRES_DB: smp_civic
      POSTGRES_USER: smp_user
      POSTGRES_PASSWORD: smp_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - smp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smp_user -d smp_civic"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: smp_civic_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - smp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: smp_civic_backend
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DATABASE_URL=postgresql://smp_user:smp_password@db:5432/smp_civic
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smp_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: smp_civic_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - smp_network
    command: npm start
    stdin_open: true
    tty: true

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: smp_civic_celery_worker
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://smp_user:smp_password@db:5432/smp_civic
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smp_network
    command: celery -A smp_civic worker --loglevel=info

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: smp_civic_celery_beat
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://smp_user:smp_password@db:5432/smp_civic
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smp_network
    command: celery -A smp_civic beat --loglevel=info

  # Nginx proxy (for production-like setup)
  nginx:
    build:
      context: .
      dockerfile: docker/nginx.Dockerfile
    container_name: smp_civic_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl/certs:ro
    depends_on:
      - backend
      - frontend
    networks:
      - smp_network

  # Elasticsearch for search functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: smp_civic_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - smp_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  elasticsearch_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  smp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16